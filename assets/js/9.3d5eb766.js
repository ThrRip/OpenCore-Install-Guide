(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{312:function(t,e,a){t.exports=a.p+"assets/img/misc.39d503c8.png"},313:function(t,e,a){t.exports=a.p+"assets/img/nvram.5fce733f.png"},314:function(t,e,a){t.exports=a.p+"assets/img/aptio-iv-booter.efa1be18.png"},316:function(t,e,a){t.exports=a.p+"assets/img/DP-no-igpu.7de6ce5b.png"},317:function(t,e,a){t.exports=a.p+"assets/img/iMacPro-smbios.90960b7f.png"},318:function(t,e,a){t.exports=a.p+"assets/img/aptio-v-uefi.229e6a50.png"},348:function(t,e,a){t.exports=a.p+"assets/img/kernel.cb9b6324.png"},349:function(t,e,a){t.exports=a.p+"assets/img/kernel-patch.a2ec6a4e.png"},350:function(t,e,a){t.exports=a.p+"assets/img/kernel.1e606203.gif"},399:function(t,e,a){t.exports=a.p+"assets/img/acpi-fx.29819b6e.png"},583:function(t,e,a){"use strict";a.r(e);var i=a(25),o=Object(i.a)({},(function(){var t=this,e=t.$createElement,i=t._self._c||e;return i("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[i("h1",{attrs:{id:"bulldozer-15h-and-jaguar-16h"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#bulldozer-15h-and-jaguar-16h"}},[t._v("#")]),t._v(" Bulldozer(15h) and Jaguar(16h)")]),t._v(" "),i("table",[i("thead",[i("tr",[i("th",{staticStyle:{"text-align":"left"}},[t._v("Support")]),t._v(" "),i("th",{staticStyle:{"text-align":"left"}},[t._v("Version")])])]),t._v(" "),i("tbody",[i("tr",[i("td",{staticStyle:{"text-align":"left"}},[t._v("Supported OpenCore version")]),t._v(" "),i("td",{staticStyle:{"text-align":"left"}},[t._v("0.6.4")])]),t._v(" "),i("tr",[i("td",{staticStyle:{"text-align":"left"}},[t._v("Initial macOS Support")]),t._v(" "),i("td",{staticStyle:{"text-align":"left"}},[t._v("macOS 10.13, High Sierra")])])])]),t._v(" "),i("h2",{attrs:{id:"starting-point"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#starting-point"}},[t._v("#")]),t._v(" Starting Point")]),t._v(" "),i("p",[t._v("So making a config.plist may seem hard, it's not. It just takes some time but this guide will tell you how to configure everything, you won't be left in the cold. This also means if you have issues, review your config settings to make sure they're correct. Main things to note with OpenCore:")]),t._v(" "),i("ul",[i("li",[i("strong",[t._v("All properties must be defined")]),t._v(", there are no default OpenCore will fall back on so "),i("strong",[t._v("do not delete sections unless told explicitly so")]),t._v(". If the guide doesn't mention the option, leave it at default.")]),t._v(" "),i("li",[i("strong",[t._v("The Sample.plist cannot be used As-Is")]),t._v(", you must configure it to your system")]),t._v(" "),i("li",[i("strong",[t._v("DO NOT USE CONFIGURATORS")]),t._v(", these rarely respect OpenCore's configuration and even some like Mackie's will add Clover properties and corrupt plists!")])]),t._v(" "),i("p",[t._v("Now with all that, a quick reminder of the tools we need")]),t._v(" "),i("ul",[i("li",[i("a",{attrs:{href:"https://github.com/corpnewt/ProperTree",target:"_blank",rel:"noopener noreferrer"}},[t._v("ProperTree"),i("OutboundLink")],1),t._v(" "),i("ul",[i("li",[t._v("Universal plist editor")])])]),t._v(" "),i("li",[i("a",{attrs:{href:"https://github.com/corpnewt/GenSMBIOS",target:"_blank",rel:"noopener noreferrer"}},[t._v("GenSMBIOS"),i("OutboundLink")],1),t._v(" "),i("ul",[i("li",[t._v("For generating our SMBIOS data")])])]),t._v(" "),i("li",[i("a",{attrs:{href:"https://github.com/acidanthera/OpenCorePkg/releases",target:"_blank",rel:"noopener noreferrer"}},[t._v("Sample/config.plist"),i("OutboundLink")],1),t._v(" "),i("ul",[i("li",[t._v("See previous section on how to obtain: "),i("RouterLink",{attrs:{to:"/config.plist/"}},[t._v("config.plist Setup")])],1)])]),t._v(" "),i("li",[i("a",{attrs:{href:"https://github.com/AMD-OSX/AMD_Vanilla/tree/opencore",target:"_blank",rel:"noopener noreferrer"}},[t._v("AMD Kernel Patches"),i("OutboundLink")],1),t._v(" "),i("ul",[i("li",[t._v("Needed for booting macOS on AMD hardware(save these for later, we'll go over how to use them below)")]),t._v(" "),i("li",[i("a",{attrs:{href:"https://github.com/AMD-OSX/AMD_Vanilla/tree/opencore/15h_16h",target:"_blank",rel:"noopener noreferrer"}},[t._v("Bulldozer/Jaguar(15h/16h)"),i("OutboundLink")],1),t._v(" (Supports 10.13, 10.14, and 10.15)")])])])]),t._v(" "),i("p",[i("strong",[t._v("And read this guide more than once before setting up OpenCore and make sure you have it set up correctly. Do note that images will not always be the most up-to-date so please read the text below them, if nothing's mentioned then leave as default.")])]),t._v(" "),i("h2",{attrs:{id:"acpi"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#acpi"}},[t._v("#")]),t._v(" ACPI")]),t._v(" "),i("p",[i("img",{attrs:{src:a(399),alt:"ACPI"}})]),t._v(" "),i("h3",{attrs:{id:"add"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#add"}},[t._v("#")]),t._v(" Add")]),t._v(" "),i("div",{staticClass:"custom-block tip"},[i("p",{staticClass:"custom-block-title"},[t._v("Info")]),t._v(" "),i("p",[t._v("This is where you'll add SSDTs for your system, these are very important to "),i("strong",[t._v("booting macOS")]),t._v(" and have many uses like "),i("a",{attrs:{href:"https://dortania.github.io/OpenCore-Post-Install/usb/",target:"_blank",rel:"noopener noreferrer"}},[t._v("USB maps"),i("OutboundLink")],1),t._v(", "),i("RouterLink",{attrs:{to:"/extras/spoof.html"}},[t._v("disabling unsupported GPUs")]),t._v(" and such. And with our system, "),i("strong",[t._v("it's even required to boot")]),t._v(". Guide on making them found here: "),i("a",{attrs:{href:"https://dortania.github.io/Getting-Started-With-ACPI/",target:"_blank",rel:"noopener noreferrer"}},[i("strong",[t._v("Getting started with ACPI")]),i("OutboundLink")],1)],1),t._v(" "),i("table",[i("thead",[i("tr",[i("th",{staticStyle:{"text-align":"left"}},[t._v("Required_SSDTs")]),t._v(" "),i("th",{staticStyle:{"text-align":"left"}},[t._v("Description")])])]),t._v(" "),i("tbody",[i("tr",[i("td",{staticStyle:{"text-align":"left"}},[i("strong",[i("a",{attrs:{href:"https://dortania.github.io/Getting-Started-With-ACPI/",target:"_blank",rel:"noopener noreferrer"}},[t._v("SSDT-EC-USBX"),i("OutboundLink")],1)])]),t._v(" "),i("td",{staticStyle:{"text-align":"left"}},[t._v("Fixes both the embedded controller and USB power, see "),i("a",{attrs:{href:"https://dortania.github.io/Getting-Started-With-ACPI/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Getting Started With ACPI Guide"),i("OutboundLink")],1),t._v(" for more details.")])])])]),t._v(" "),i("p",[t._v("Note that you "),i("strong",[t._v("should not")]),t._v(" add your generated "),i("code",[t._v("DSDT.aml")]),t._v(" here, it is already in your firmware. So if present, remove the entry for it in your "),i("code",[t._v("config.plist")]),t._v(" and under EFI/OC/ACPI.")]),t._v(" "),i("p",[t._v("For those wanting a deeper dive into dumping your DSDT, how to make these SSDTs, and compiling them, please see the "),i("a",{attrs:{href:"https://dortania.github.io/Getting-Started-With-ACPI/",target:"_blank",rel:"noopener noreferrer"}},[i("strong",[t._v("Getting started with ACPI")]),i("OutboundLink")],1),t._v(" "),i("strong",[t._v("page.")]),t._v(" Compiled SSDTs have a "),i("strong",[t._v(".aml")]),t._v(" extension(Assembled) and will go into the "),i("code",[t._v("EFI/OC/ACPI")]),t._v(" folder and "),i("strong",[t._v("must")]),t._v(" be specified in your config under "),i("code",[t._v("ACPI -> Add")]),t._v(" as well.")])]),t._v(" "),i("h3",{attrs:{id:"delete"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#delete"}},[t._v("#")]),t._v(" Delete")]),t._v(" "),i("p",[t._v("This blocks certain ACPI tables from loading, for us we can ignore this.")]),t._v(" "),i("h3",{attrs:{id:"patch"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#patch"}},[t._v("#")]),t._v(" Patch")]),t._v(" "),i("p",[t._v("This section allows us to dynamically modify parts of the ACPI (DSDT, SSDT, etc.) via OpenCore. For us, our patches are handled by our SSDTs. This is a much cleaner solution as this will allow us to boot Windows and other OSes with OpenCore")]),t._v(" "),i("h3",{attrs:{id:"quirks"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#quirks"}},[t._v("#")]),t._v(" Quirks")]),t._v(" "),i("p",[t._v("Settings relating to ACPI, leave everything here as default as we have no use for these quirks.")]),t._v(" "),i("h2",{attrs:{id:"booter"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#booter"}},[t._v("#")]),t._v(" Booter")]),t._v(" "),i("p",[i("img",{attrs:{src:a(314),alt:"Booter"}})]),t._v(" "),i("p",[t._v("This section is dedicated to quirks relating to boot.efi patching with OpenRuntime, the replacement for AptioMemoryFix.efi")]),t._v(" "),i("h3",{attrs:{id:"mmiowhitelist"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#mmiowhitelist"}},[t._v("#")]),t._v(" MmioWhitelist")]),t._v(" "),i("p",[t._v("This section is allowing spaces to be passthrough to macOS that are generally ignored, useful when paired with "),i("code",[t._v("DevirtualiseMmio")])]),t._v(" "),i("h3",{attrs:{id:"quirks-2"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#quirks-2"}},[t._v("#")]),t._v(" Quirks")]),t._v(" "),i("div",{staticClass:"custom-block tip"},[i("p",{staticClass:"custom-block-title"},[t._v("Info")]),t._v(" "),i("p",[t._v("Settings relating to boot.efi patching and firmware fixes, for us, we leave it as default")])]),t._v(" "),i("details",{staticClass:"custom-block details"},[i("summary",[t._v("More in-depth Info")]),t._v(" "),i("ul",[i("li",[i("strong",[t._v("AvoidRuntimeDefrag")]),t._v(": YES\n"),i("ul",[i("li",[t._v("Fixes UEFI runtime services like date, time, NVRAM, power control, etc")])])]),t._v(" "),i("li",[i("strong",[t._v("EnableWriteUnprotector")]),t._v(": YES\n"),i("ul",[i("li",[t._v("Needed to remove write protection from CR0 register.")])])]),t._v(" "),i("li",[i("strong",[t._v("SetupVirtualMap")]),t._v(": YES\n"),i("ul",[i("li",[t._v("Fixes SetVirtualAddresses calls to virtual addresses, required for Gigabyte boards to resolve early kernel panics")])])])])]),t._v(" "),i("h2",{attrs:{id:"deviceproperties"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#deviceproperties"}},[t._v("#")]),t._v(" DeviceProperties")]),t._v(" "),i("p",[i("img",{attrs:{src:a(316),alt:"DeviceProperties"}})]),t._v(" "),i("h3",{attrs:{id:"add-2"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#add-2"}},[t._v("#")]),t._v(" Add")]),t._v(" "),i("p",[t._v("Sets device properties from a map.")]),t._v(" "),i("p",[t._v("By default, the Sample.plist has this section set for iGPU and Audio. We have no iGPU so PciRoot "),i("code",[t._v("PciRoot(0x0)/Pci(0x2,0x0)")]),t._v(" can be removed from "),i("code",[t._v("Add")]),t._v(" section. For audio we'll be setting the layout in the boot-args section, so removal of "),i("code",[t._v("PciRoot(0x0)/Pci(0x1b,0x0)")]),t._v(" is also recommended from both "),i("code",[t._v("Add")]),t._v(" and "),i("code",[t._v("Block")]),t._v(" sections")]),t._v(" "),i("p",[t._v("TL;DR, delete all the PciRoot's here as we won't be using this section.")]),t._v(" "),i("h3",{attrs:{id:"delete-2"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#delete-2"}},[t._v("#")]),t._v(" Delete")]),t._v(" "),i("p",[t._v("Removes device properties from the map, for us we can ignore this")]),t._v(" "),i("h2",{attrs:{id:"kernel"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#kernel"}},[t._v("#")]),t._v(" Kernel")]),t._v(" "),i("table",[i("thead",[i("tr",[i("th",{staticStyle:{"text-align":"left"}},[t._v("Kernel")]),t._v(" "),i("th",{staticStyle:{"text-align":"left"}},[t._v("Kernel Patches")])])]),t._v(" "),i("tbody",[i("tr",[i("td",{staticStyle:{"text-align":"left"}},[i("img",{attrs:{src:a(348),alt:"Kernel"}})]),t._v(" "),i("td",{staticStyle:{"text-align":"left"}},[i("img",{attrs:{src:a(349),alt:""}})])])])]),t._v(" "),i("h3",{attrs:{id:"add-3"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#add-3"}},[t._v("#")]),t._v(" Add")]),t._v(" "),i("p",[t._v("Here's where we specify which kexts to load, in what specific order to load, and what architectures each kext is meant for. By default we recommend leaving what ProperTree has done, however for 32-bit CPUs please see below:")]),t._v(" "),i("details",{staticClass:"custom-block details"},[i("summary",[t._v("More in-depth Info")]),t._v(" "),i("p",[t._v("The main thing you need to keep in mind is:")]),t._v(" "),i("ul",[i("li",[t._v("Load order\n"),i("ul",[i("li",[t._v("Remember that any plugins should load "),i("em",[t._v("after")]),t._v(" its dependencies")]),t._v(" "),i("li",[t._v("This means kexts like Lilu "),i("strong",[t._v("must")]),t._v(" come before VirtualSMC, AppleALC, WhateverGreen, etc")])])])]),t._v(" "),i("p",[t._v("A reminder that "),i("a",{attrs:{href:"https://github.com/corpnewt/ProperTree",target:"_blank",rel:"noopener noreferrer"}},[t._v("ProperTree"),i("OutboundLink")],1),t._v(" users can run "),i("strong",[t._v("Cmd/Ctrl + Shift + R")]),t._v(" to add all their kexts in the correct order without manually typing each kext out.")]),t._v(" "),i("ul",[i("li",[i("strong",[t._v("Arch")]),t._v(" "),i("ul",[i("li",[t._v("Architectures supported by this kext")]),t._v(" "),i("li",[t._v("Currently supported values are "),i("code",[t._v("Any")]),t._v(", "),i("code",[t._v("i386")]),t._v(" (32-bit), and "),i("code",[t._v("x86_64")]),t._v(" (64-bit)")])])]),t._v(" "),i("li",[i("strong",[t._v("BundlePath")]),t._v(" "),i("ul",[i("li",[t._v("Name of the kext")]),t._v(" "),i("li",[t._v("ex: "),i("code",[t._v("Lilu.kext")])])])]),t._v(" "),i("li",[i("strong",[t._v("Enabled")]),t._v(" "),i("ul",[i("li",[t._v("Self-explanatory, either enables or disables the kext")])])]),t._v(" "),i("li",[i("strong",[t._v("ExecutablePath")]),t._v(" "),i("ul",[i("li",[t._v("Path to the actual executable is hidden within the kext, you can see what path your kext has by right-clicking and selecting "),i("code",[t._v("Show Package Contents")]),t._v(". Generally, they'll be "),i("code",[t._v("Contents/MacOS/Kext")]),t._v(" but some have kexts hidden within under "),i("code",[t._v("Plugin")]),t._v(" folder. Do note that plist only kexts do not need this filled in.")]),t._v(" "),i("li",[t._v("ex: "),i("code",[t._v("Contents/MacOS/Lilu")])])])]),t._v(" "),i("li",[i("strong",[t._v("MinKernel")]),t._v(" "),i("ul",[i("li",[t._v("Lowest kernel version your kext will be injected into, see below table for possible values")]),t._v(" "),i("li",[t._v("ex. "),i("code",[t._v("12.00.00")]),t._v(" for OS X 10.8")])])]),t._v(" "),i("li",[i("strong",[t._v("MaxKernel")]),t._v(" "),i("ul",[i("li",[t._v("Highest kernel version your kext will be injected into, see below table for possible values")]),t._v(" "),i("li",[t._v("ex. "),i("code",[t._v("11.99.99")]),t._v(" for OS X 10.7")])])]),t._v(" "),i("li",[i("strong",[t._v("PlistPath")]),t._v(" "),i("ul",[i("li",[t._v("Path to the "),i("code",[t._v("info.plist")]),t._v(" hidden within the kext")]),t._v(" "),i("li",[t._v("ex: "),i("code",[t._v("Contents/Info.plist")])])])])]),t._v(" "),i("details",{staticClass:"custom-block details"},[i("summary",[t._v("Kernel Support Table")]),t._v(" "),i("table",[i("thead",[i("tr",[i("th",{staticStyle:{"text-align":"left"}},[t._v("OS X Version")]),t._v(" "),i("th",{staticStyle:{"text-align":"left"}},[t._v("MinKernel")]),t._v(" "),i("th",{staticStyle:{"text-align":"left"}},[t._v("MaxKernel")])])]),t._v(" "),i("tbody",[i("tr",[i("td",{staticStyle:{"text-align":"left"}},[t._v("10.4")]),t._v(" "),i("td",{staticStyle:{"text-align":"left"}},[t._v("8.0.0")]),t._v(" "),i("td",{staticStyle:{"text-align":"left"}},[t._v("8.99.99")])]),t._v(" "),i("tr",[i("td",{staticStyle:{"text-align":"left"}},[t._v("10.5")]),t._v(" "),i("td",{staticStyle:{"text-align":"left"}},[t._v("9.0.0")]),t._v(" "),i("td",{staticStyle:{"text-align":"left"}},[t._v("9.99.99")])]),t._v(" "),i("tr",[i("td",{staticStyle:{"text-align":"left"}},[t._v("10.6")]),t._v(" "),i("td",{staticStyle:{"text-align":"left"}},[t._v("10.0.0")]),t._v(" "),i("td",{staticStyle:{"text-align":"left"}},[t._v("10.99.99")])]),t._v(" "),i("tr",[i("td",{staticStyle:{"text-align":"left"}},[t._v("10.7")]),t._v(" "),i("td",{staticStyle:{"text-align":"left"}},[t._v("11.0.0")]),t._v(" "),i("td",{staticStyle:{"text-align":"left"}},[t._v("11.99.99")])]),t._v(" "),i("tr",[i("td",{staticStyle:{"text-align":"left"}},[t._v("10.8")]),t._v(" "),i("td",{staticStyle:{"text-align":"left"}},[t._v("12.0.0")]),t._v(" "),i("td",{staticStyle:{"text-align":"left"}},[t._v("12.99.99")])]),t._v(" "),i("tr",[i("td",{staticStyle:{"text-align":"left"}},[t._v("10.9")]),t._v(" "),i("td",{staticStyle:{"text-align":"left"}},[t._v("13.0.0")]),t._v(" "),i("td",{staticStyle:{"text-align":"left"}},[t._v("13.99.99")])]),t._v(" "),i("tr",[i("td",{staticStyle:{"text-align":"left"}},[t._v("10.10")]),t._v(" "),i("td",{staticStyle:{"text-align":"left"}},[t._v("14.0.0")]),t._v(" "),i("td",{staticStyle:{"text-align":"left"}},[t._v("14.99.99")])]),t._v(" "),i("tr",[i("td",{staticStyle:{"text-align":"left"}},[t._v("10.11")]),t._v(" "),i("td",{staticStyle:{"text-align":"left"}},[t._v("15.0.0")]),t._v(" "),i("td",{staticStyle:{"text-align":"left"}},[t._v("15.99.99")])]),t._v(" "),i("tr",[i("td",{staticStyle:{"text-align":"left"}},[t._v("10.12")]),t._v(" "),i("td",{staticStyle:{"text-align":"left"}},[t._v("16.0.0")]),t._v(" "),i("td",{staticStyle:{"text-align":"left"}},[t._v("16.99.99")])]),t._v(" "),i("tr",[i("td",{staticStyle:{"text-align":"left"}},[t._v("10.13")]),t._v(" "),i("td",{staticStyle:{"text-align":"left"}},[t._v("17.0.0")]),t._v(" "),i("td",{staticStyle:{"text-align":"left"}},[t._v("17.99.99")])]),t._v(" "),i("tr",[i("td",{staticStyle:{"text-align":"left"}},[t._v("10.14")]),t._v(" "),i("td",{staticStyle:{"text-align":"left"}},[t._v("18.0.0")]),t._v(" "),i("td",{staticStyle:{"text-align":"left"}},[t._v("18.99.99")])]),t._v(" "),i("tr",[i("td",{staticStyle:{"text-align":"left"}},[t._v("10.15")]),t._v(" "),i("td",{staticStyle:{"text-align":"left"}},[t._v("19.0.0")]),t._v(" "),i("td",{staticStyle:{"text-align":"left"}},[t._v("19.99.99")])]),t._v(" "),i("tr",[i("td",{staticStyle:{"text-align":"left"}},[t._v("11")]),t._v(" "),i("td",{staticStyle:{"text-align":"left"}},[t._v("20.0.0")]),t._v(" "),i("td",{staticStyle:{"text-align":"left"}},[t._v("20.99.99")])])])])])]),t._v(" "),i("h3",{attrs:{id:"emulate"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#emulate"}},[t._v("#")]),t._v(" Emulate")]),t._v(" "),i("div",{staticClass:"custom-block tip"},[i("p",{staticClass:"custom-block-title"},[t._v("Info")]),t._v(" "),i("p",[t._v("Needed for spoofing unsupported CPUs like Pentiums and Celerons and to disable CPU power management on unsupported CPUs (such as AMD CPUs)")]),t._v(" "),i("table",[i("thead",[i("tr",[i("th",{staticStyle:{"text-align":"left"}},[t._v("Quirk")]),t._v(" "),i("th",{staticStyle:{"text-align":"left"}},[t._v("Enabled")])])]),t._v(" "),i("tbody",[i("tr",[i("td",{staticStyle:{"text-align":"left"}},[t._v("DummyPowerManagement")]),t._v(" "),i("td",{staticStyle:{"text-align":"left"}},[t._v("YES")])])])])]),t._v(" "),i("details",{staticClass:"custom-block details"},[i("summary",[t._v("More in-depth Info")]),t._v(" "),i("ul",[i("li",[i("strong",[t._v("CpuidMask")]),t._v(": Leave this blank\n"),i("ul",[i("li",[t._v("Mask for fake CPUID")])])]),t._v(" "),i("li",[i("strong",[t._v("CpuidData")]),t._v(": Leave this blank\n"),i("ul",[i("li",[t._v("Fake CPUID entry")])])]),t._v(" "),i("li",[i("strong",[t._v("DummyPowerManagement")]),t._v(": YES\n"),i("ul",[i("li",[t._v("New alternative to NullCPUPowerManagement, required for all AMD CPU based systems as there's no native power management. Intel can ignore")])])]),t._v(" "),i("li",[i("strong",[t._v("MinKernel")]),t._v(": Leave this blank\n"),i("ul",[i("li",[t._v("Lowest kernel version the above patches will be injected into, if no value specified it'll be applied to all versions of macOS. See below table for possible values")]),t._v(" "),i("li",[t._v("ex. "),i("code",[t._v("12.00.00")]),t._v(" for OS X 10.8")])])]),t._v(" "),i("li",[i("strong",[t._v("MaxKernel")]),t._v(": Leave this blank\n"),i("ul",[i("li",[t._v("Highest kernel version the above patches will be injected into, if no value specified it'll be applied to all versions of macOS. See below table for possible values")]),t._v(" "),i("li",[t._v("ex. "),i("code",[t._v("11.99.99")]),t._v(" for OS X 10.7")])])])]),t._v(" "),i("details",{staticClass:"custom-block details"},[i("summary",[t._v("Kernel Support Table")]),t._v(" "),i("table",[i("thead",[i("tr",[i("th",{staticStyle:{"text-align":"left"}},[t._v("OS X Version")]),t._v(" "),i("th",{staticStyle:{"text-align":"left"}},[t._v("MinKernel")]),t._v(" "),i("th",{staticStyle:{"text-align":"left"}},[t._v("MaxKernel")])])]),t._v(" "),i("tbody",[i("tr",[i("td",{staticStyle:{"text-align":"left"}},[t._v("10.4")]),t._v(" "),i("td",{staticStyle:{"text-align":"left"}},[t._v("8.0.0")]),t._v(" "),i("td",{staticStyle:{"text-align":"left"}},[t._v("8.99.99")])]),t._v(" "),i("tr",[i("td",{staticStyle:{"text-align":"left"}},[t._v("10.5")]),t._v(" "),i("td",{staticStyle:{"text-align":"left"}},[t._v("9.0.0")]),t._v(" "),i("td",{staticStyle:{"text-align":"left"}},[t._v("9.99.99")])]),t._v(" "),i("tr",[i("td",{staticStyle:{"text-align":"left"}},[t._v("10.6")]),t._v(" "),i("td",{staticStyle:{"text-align":"left"}},[t._v("10.0.0")]),t._v(" "),i("td",{staticStyle:{"text-align":"left"}},[t._v("10.99.99")])]),t._v(" "),i("tr",[i("td",{staticStyle:{"text-align":"left"}},[t._v("10.7")]),t._v(" "),i("td",{staticStyle:{"text-align":"left"}},[t._v("11.0.0")]),t._v(" "),i("td",{staticStyle:{"text-align":"left"}},[t._v("11.99.99")])]),t._v(" "),i("tr",[i("td",{staticStyle:{"text-align":"left"}},[t._v("10.8")]),t._v(" "),i("td",{staticStyle:{"text-align":"left"}},[t._v("12.0.0")]),t._v(" "),i("td",{staticStyle:{"text-align":"left"}},[t._v("12.99.99")])]),t._v(" "),i("tr",[i("td",{staticStyle:{"text-align":"left"}},[t._v("10.9")]),t._v(" "),i("td",{staticStyle:{"text-align":"left"}},[t._v("13.0.0")]),t._v(" "),i("td",{staticStyle:{"text-align":"left"}},[t._v("13.99.99")])]),t._v(" "),i("tr",[i("td",{staticStyle:{"text-align":"left"}},[t._v("10.10")]),t._v(" "),i("td",{staticStyle:{"text-align":"left"}},[t._v("14.0.0")]),t._v(" "),i("td",{staticStyle:{"text-align":"left"}},[t._v("14.99.99")])]),t._v(" "),i("tr",[i("td",{staticStyle:{"text-align":"left"}},[t._v("10.11")]),t._v(" "),i("td",{staticStyle:{"text-align":"left"}},[t._v("15.0.0")]),t._v(" "),i("td",{staticStyle:{"text-align":"left"}},[t._v("15.99.99")])]),t._v(" "),i("tr",[i("td",{staticStyle:{"text-align":"left"}},[t._v("10.12")]),t._v(" "),i("td",{staticStyle:{"text-align":"left"}},[t._v("16.0.0")]),t._v(" "),i("td",{staticStyle:{"text-align":"left"}},[t._v("16.99.99")])]),t._v(" "),i("tr",[i("td",{staticStyle:{"text-align":"left"}},[t._v("10.13")]),t._v(" "),i("td",{staticStyle:{"text-align":"left"}},[t._v("17.0.0")]),t._v(" "),i("td",{staticStyle:{"text-align":"left"}},[t._v("17.99.99")])]),t._v(" "),i("tr",[i("td",{staticStyle:{"text-align":"left"}},[t._v("10.14")]),t._v(" "),i("td",{staticStyle:{"text-align":"left"}},[t._v("18.0.0")]),t._v(" "),i("td",{staticStyle:{"text-align":"left"}},[t._v("18.99.99")])]),t._v(" "),i("tr",[i("td",{staticStyle:{"text-align":"left"}},[t._v("10.15")]),t._v(" "),i("td",{staticStyle:{"text-align":"left"}},[t._v("19.0.0")]),t._v(" "),i("td",{staticStyle:{"text-align":"left"}},[t._v("19.99.99")])]),t._v(" "),i("tr",[i("td",{staticStyle:{"text-align":"left"}},[t._v("11")]),t._v(" "),i("td",{staticStyle:{"text-align":"left"}},[t._v("20.0.0")]),t._v(" "),i("td",{staticStyle:{"text-align":"left"}},[t._v("20.99.99")])])])])])]),t._v(" "),i("h3",{attrs:{id:"force"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#force"}},[t._v("#")]),t._v(" Force")]),t._v(" "),i("p",[t._v("Used for loading kexts off system volume, only relevant for older operating systems where certain kexts are not present in the cache(ie. IONetworkingFamily in 10.6).")]),t._v(" "),i("p",[t._v("For us, we can ignore.")]),t._v(" "),i("h3",{attrs:{id:"block"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#block"}},[t._v("#")]),t._v(" Block")]),t._v(" "),i("p",[t._v("Blocks certain kexts from loading. Not relevant for us.")]),t._v(" "),i("h3",{attrs:{id:"patch-2"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#patch-2"}},[t._v("#")]),t._v(" Patch")]),t._v(" "),i("p",[t._v("This is where the AMD kernel patching magic happens. Please do note that "),i("code",[t._v("KernelToPatch")]),t._v(" and "),i("code",[t._v("MatchOS")]),t._v(" from Clover becomes "),i("code",[t._v("Kernel")]),t._v(" and "),i("code",[t._v("MinKernel")]),t._v("/ "),i("code",[t._v("MaxKernel")]),t._v(" in OpenCore, you can find pre-made patches by "),i("a",{attrs:{href:"https://amd-osx.com/forum/memberlist.php?mode=viewprofile&u=10918&sid=e0feb8a14a97be482d2fd68dbc268f97",target:"_blank",rel:"noopener noreferrer"}},[t._v("AlGrey"),i("OutboundLink")],1),t._v("(algrey#9303).")]),t._v(" "),i("p",[t._v("Kernel patches:")]),t._v(" "),i("ul",[i("li",[i("a",{attrs:{href:"https://github.com/AMD-OSX/AMD_Vanilla/tree/opencore/15h_16h",target:"_blank",rel:"noopener noreferrer"}},[t._v("Bulldozer/Jaguar(15h/16h)"),i("OutboundLink")],1),t._v(" (10.13, 10.14, and 10.15)")])]),t._v(" "),i("p",[t._v("To merge:")]),t._v(" "),i("ul",[i("li",[t._v("Open both files,")]),t._v(" "),i("li",[t._v("Delete the "),i("code",[t._v("Kernel -> Patch")]),t._v(" section from config.plist")]),t._v(" "),i("li",[t._v("Copy the "),i("code",[t._v("Kernel -> Patch")]),t._v(" section from patches.plist")]),t._v(" "),i("li",[t._v("Paste into where old patches were in config.plist")])]),t._v(" "),i("p",[i("img",{attrs:{src:a(350),alt:""}})]),t._v(" "),i("h3",{attrs:{id:"quirks-3"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#quirks-3"}},[t._v("#")]),t._v(" Quirks")]),t._v(" "),i("div",{staticClass:"custom-block tip"},[i("p",{staticClass:"custom-block-title"},[t._v("Info")]),t._v(" "),i("p",[t._v("Settings relating to the kernel, for us we'll be enabling the following:")]),t._v(" "),i("table",[i("thead",[i("tr",[i("th",{staticStyle:{"text-align":"left"}},[t._v("Quirk")]),t._v(" "),i("th",{staticStyle:{"text-align":"left"}},[t._v("Enabled")])])]),t._v(" "),i("tbody",[i("tr",[i("td",{staticStyle:{"text-align":"left"}},[t._v("PanicNoKextDump")]),t._v(" "),i("td",{staticStyle:{"text-align":"left"}},[t._v("YES")])]),t._v(" "),i("tr",[i("td",{staticStyle:{"text-align":"left"}},[t._v("PowerTimeoutKernelPanic")]),t._v(" "),i("td",{staticStyle:{"text-align":"left"}},[t._v("YES")])]),t._v(" "),i("tr",[i("td",{staticStyle:{"text-align":"left"}},[t._v("XhciPortLimit")]),t._v(" "),i("td",{staticStyle:{"text-align":"left"}},[t._v("YES")])])])])]),t._v(" "),i("details",{staticClass:"custom-block details"},[i("summary",[t._v("More in-depth Info")]),t._v(" "),i("ul",[i("li",[i("strong",[t._v("AppleCpuPmCfgLock")]),t._v(": NO\n"),i("ul",[i("li",[t._v("Only needed when CFG-Lock can't be disabled in BIOS. AMD users can ignore")])])]),t._v(" "),i("li",[i("strong",[t._v("AppleXcpmCfgLock")]),t._v(": NO\n"),i("ul",[i("li",[t._v("Only needed when CFG-Lock can't be disabled in BIOS. AMD users can ignore")])])]),t._v(" "),i("li",[i("strong",[t._v("AppleXcpmExtraMsrs")]),t._v(": NO\n"),i("ul",[i("li",[t._v("Disables multiple MSR access needed for unsupported CPUs like Pentiums and certain Xeons")])])]),t._v(" "),i("li",[i("strong",[t._v("CustomSMBIOSGuid")]),t._v(": NO\n"),i("ul",[i("li",[t._v("Performs GUID patching for UpdateSMBIOSMode set to "),i("code",[t._v("Custom")]),t._v(". Usually relevant for Dell laptops")]),t._v(" "),i("li",[t._v("Enabling this quirk in tandem with "),i("code",[t._v("PlatformInfo -> UpdateSMBIOSMode -> Custom")]),t._v(' will disable SMBIOS injection into "non-Apple" OSes however we do not endorse this method as it breaks Bootcamp compatibility. Use at your own risk.')])])]),t._v(" "),i("li",[i("strong",[t._v("DisableIoMapper")]),t._v(": NO\n"),i("ul",[i("li",[t._v("AMD doesn't have DMAR or VT-D support so irrelevant")])])]),t._v(" "),i("li",[i("strong",[t._v("DisableLinkeditJettison")]),t._v(": YES\n"),i("ul",[i("li",[t._v("Allows Lilu and others to have more reliable performance without "),i("code",[t._v("keepsyms=1")])])])]),t._v(" "),i("li",[i("strong",[t._v("DisableRtcChecksum")]),t._v(": NO\n"),i("ul",[i("li",[t._v("Prevents AppleRTC from writing to primary checksum (0x58-0x59), required for users who either receive BIOS reset or are sent into Safe mode after reboot/shutdown")])])]),t._v(" "),i("li",[i("strong",[t._v("ExtendBTFeatureFlags")]),t._v(" NO\n"),i("ul",[i("li",[t._v("Helpful for those having continuity issues with non-Apple/non-Fenvi cards")])])]),t._v(" "),i("li",[i("strong",[t._v("LapicKernelPanic")]),t._v(": NO\n"),i("ul",[i("li",[t._v("Disables kernel panic on AP core lapic interrupt, generally needed for HP systems. Clover equivalent is "),i("code",[t._v("Kernel LAPIC")])])])]),t._v(" "),i("li",[i("strong",[t._v("LegacyCommpage")]),t._v(": NO\n"),i("ul",[i("li",[t._v("Resolves SSSE3 requirement for 64 Bit CPUs in macOS, mainly relevant for 64-Bit Pentium 4 CPUs(ie. Prescott)")])])]),t._v(" "),i("li",[i("strong",[t._v("PanicNoKextDump")]),t._v(": YES\n"),i("ul",[i("li",[t._v("Allows for reading kernel panics logs when kernel panics occur")])])]),t._v(" "),i("li",[i("strong",[t._v("PowerTimeoutKernelPanic")]),t._v(": YES\n"),i("ul",[i("li",[t._v("Helps fix kernel panics relating to power changes with Apple drivers in macOS Catalina, most notably with digital audio.")])])]),t._v(" "),i("li",[i("strong",[t._v("XhciPortLimit")]),t._v(": YES\n"),i("ul",[i("li",[t._v("This is actually the 15 port limit patch, don't rely on it as it's not a guaranteed solution for fixing USB. A more proper solution for AMD can be found here: "),i("a",{attrs:{href:"https://dortania.github.io/OpenCore-Post-Install/usb/",target:"_blank",rel:"noopener noreferrer"}},[t._v("AMD USB Mapping"),i("OutboundLink")],1)])])])])]),t._v(" "),i("h3",{attrs:{id:"scheme"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#scheme"}},[t._v("#")]),t._v(" Scheme")]),t._v(" "),i("p",[t._v("Settings related to legacy booting(ie. 10.4-10.6), for majority you can skip however for those planning to boot legacy OSes you can see below:")]),t._v(" "),i("details",{staticClass:"custom-block details"},[i("summary",[t._v("More in-depth Info")]),t._v(" "),i("ul",[i("li",[i("p",[i("strong",[t._v("FuzzyMatch")]),t._v(": True")]),t._v(" "),i("ul",[i("li",[t._v("Used for ignoring checksums with kernelcache, instead opting for the latest cache available. Can help improve boot performance on many machines in 10.6")])])]),t._v(" "),i("li",[i("p",[i("strong",[t._v("KernelArch")]),t._v(": x86_64")]),t._v(" "),i("ul",[i("li",[t._v("Set the kernel's arch type, you can choose between "),i("code",[t._v("Auto")]),t._v(", "),i("code",[t._v("i386")]),t._v(" (32-bit), and "),i("code",[t._v("x86_64")]),t._v(" (64-bit).")]),t._v(" "),i("li",[t._v("If you're booting older OSes which require a 32-bit kernel(ie. 10.4 and 10.5) we recommend to set this to "),i("code",[t._v("Auto")]),t._v(" and let macOS decide based on your SMBIOS. See below table for supported values:\n"),i("ul",[i("li",[t._v("10.4-10.5 — "),i("code",[t._v("x86_64")]),t._v(", "),i("code",[t._v("i386")]),t._v(" or "),i("code",[t._v("i386-user32")]),t._v(" "),i("ul",[i("li",[i("code",[t._v("i386-user32")]),t._v(" refers 32-bit userspace, so 32-bit CPUs must use this(or CPUs missing SSSE3)")]),t._v(" "),i("li",[i("code",[t._v("x86_64")]),t._v(" will still have a 32-bit kernelspace however will ensure 64-bit userspace in 10.4/5")])])]),t._v(" "),i("li",[t._v("10.6 — "),i("code",[t._v("i386")]),t._v(", "),i("code",[t._v("i386-user32")]),t._v(", or "),i("code",[t._v("x86_64")])]),t._v(" "),i("li",[t._v("10.7 — "),i("code",[t._v("i386")]),t._v(" or "),i("code",[t._v("x86_64")])]),t._v(" "),i("li",[t._v("10.8 or newer — "),i("code",[t._v("x86_64")])])])])])]),t._v(" "),i("li",[i("p",[i("strong",[t._v("KernelCache")]),t._v(": Auto")]),t._v(" "),i("ul",[i("li",[t._v("Set kernel cache type, mainly useful for debugging and so we recommend "),i("code",[t._v("Auto")]),t._v(" for best support")])])])])]),t._v(" "),i("h2",{attrs:{id:"misc"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#misc"}},[t._v("#")]),t._v(" Misc")]),t._v(" "),i("p",[i("img",{attrs:{src:a(312),alt:"Misc"}})]),t._v(" "),i("h3",{attrs:{id:"boot"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#boot"}},[t._v("#")]),t._v(" Boot")]),t._v(" "),i("p",[t._v("Settings for boot screen (Leave everything as default).")]),t._v(" "),i("h3",{attrs:{id:"debug"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#debug"}},[t._v("#")]),t._v(" Debug")]),t._v(" "),i("div",{staticClass:"custom-block tip"},[i("p",{staticClass:"custom-block-title"},[t._v("Info")]),t._v(" "),i("p",[t._v("Helpful for debugging OpenCore boot issues(We'll be changing everything "),i("em",[t._v("but")]),t._v(" "),i("code",[t._v("DisplayDelay")]),t._v("):")]),t._v(" "),i("table",[i("thead",[i("tr",[i("th",{staticStyle:{"text-align":"left"}},[t._v("Quirk")]),t._v(" "),i("th",{staticStyle:{"text-align":"left"}},[t._v("Enabled")])])]),t._v(" "),i("tbody",[i("tr",[i("td",{staticStyle:{"text-align":"left"}},[t._v("AppleDebug")]),t._v(" "),i("td",{staticStyle:{"text-align":"left"}},[t._v("YES")])]),t._v(" "),i("tr",[i("td",{staticStyle:{"text-align":"left"}},[t._v("ApplePanic")]),t._v(" "),i("td",{staticStyle:{"text-align":"left"}},[t._v("YES")])]),t._v(" "),i("tr",[i("td",{staticStyle:{"text-align":"left"}},[t._v("DisableWatchDog")]),t._v(" "),i("td",{staticStyle:{"text-align":"left"}},[t._v("YES")])]),t._v(" "),i("tr",[i("td",{staticStyle:{"text-align":"left"}},[t._v("Target")]),t._v(" "),i("td",{staticStyle:{"text-align":"left"}},[t._v("67")])])])])]),t._v(" "),i("details",{staticClass:"custom-block details"},[i("summary",[t._v("More in-depth Info")]),t._v(" "),i("ul",[i("li",[i("strong",[t._v("AppleDebug")]),t._v(": YES\n"),i("ul",[i("li",[t._v("Enables boot.efi logging, useful for debugging. Note this is only supported on 10.15.4 and newer")])])]),t._v(" "),i("li",[i("strong",[t._v("ApplePanic")]),t._v(": YES\n"),i("ul",[i("li",[t._v("Attempts to log kernel panics to disk")])])]),t._v(" "),i("li",[i("strong",[t._v("DisableWatchDog")]),t._v(": YES\n"),i("ul",[i("li",[t._v("Disables the UEFI watchdog, can help with early boot issues")])])]),t._v(" "),i("li",[i("strong",[t._v("DisplayLevel")]),t._v(": "),i("code",[t._v("2147483650")]),t._v(" "),i("ul",[i("li",[t._v("Shows even more debug information, requires debug version of OpenCore")])])]),t._v(" "),i("li",[i("strong",[t._v("SerialInit")]),t._v(": NO\n"),i("ul",[i("li",[t._v("Needed for setting up serial output with OpenCore")])])]),t._v(" "),i("li",[i("strong",[t._v("SysReport")]),t._v(": NO\n"),i("ul",[i("li",[t._v("Helpful for debugging such as dumping ACPI tables")]),t._v(" "),i("li",[t._v("Note that this is limited to DEBUG versions of OpenCore")])])]),t._v(" "),i("li",[i("strong",[t._v("Target")]),t._v(": "),i("code",[t._v("67")]),t._v(" "),i("ul",[i("li",[t._v("Shows more debug information, requires debug version of OpenCore")])])])]),t._v(" "),i("p",[t._v("These values are based of those calculated in "),i("RouterLink",{attrs:{to:"/troubleshooting/debug.html"}},[t._v("OpenCore debugging")])],1)]),t._v(" "),i("h3",{attrs:{id:"security"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#security"}},[t._v("#")]),t._v(" Security")]),t._v(" "),i("div",{staticClass:"custom-block tip"},[i("p",{staticClass:"custom-block-title"},[t._v("Info")]),t._v(" "),i("p",[t._v("Security is pretty self-explanatory, "),i("strong",[t._v("do not skip")]),t._v(". We'll be changing the following:")]),t._v(" "),i("table",[i("thead",[i("tr",[i("th",{staticStyle:{"text-align":"left"}},[t._v("Quirk")]),t._v(" "),i("th",{staticStyle:{"text-align":"left"}},[t._v("Enabled")]),t._v(" "),i("th",{staticStyle:{"text-align":"left"}},[t._v("Comment")])])]),t._v(" "),i("tbody",[i("tr",[i("td",{staticStyle:{"text-align":"left"}},[t._v("AllowNvramReset")]),t._v(" "),i("td",{staticStyle:{"text-align":"left"}},[t._v("YES")]),t._v(" "),i("td",{staticStyle:{"text-align":"left"}})]),t._v(" "),i("tr",[i("td",{staticStyle:{"text-align":"left"}},[t._v("AllowSetDefault")]),t._v(" "),i("td",{staticStyle:{"text-align":"left"}},[t._v("YES")]),t._v(" "),i("td",{staticStyle:{"text-align":"left"}})]),t._v(" "),i("tr",[i("td",{staticStyle:{"text-align":"left"}},[t._v("BlacklistAppleUpdate")]),t._v(" "),i("td",{staticStyle:{"text-align":"left"}},[t._v("YES")]),t._v(" "),i("td",{staticStyle:{"text-align":"left"}})]),t._v(" "),i("tr",[i("td",{staticStyle:{"text-align":"left"}},[t._v("ScanPolicy")]),t._v(" "),i("td",{staticStyle:{"text-align":"left"}},[t._v("0")]),t._v(" "),i("td",{staticStyle:{"text-align":"left"}})]),t._v(" "),i("tr",[i("td",{staticStyle:{"text-align":"left"}},[t._v("SecureBootModel")]),t._v(" "),i("td",{staticStyle:{"text-align":"left"}},[t._v("Default")]),t._v(" "),i("td",{staticStyle:{"text-align":"left"}},[t._v("This is a word and is case-sensitive, set to "),i("code",[t._v("Disabled")]),t._v(" if you do not want secure boot(ie. you require Nvidia's Web Drivers)")])]),t._v(" "),i("tr",[i("td",{staticStyle:{"text-align":"left"}},[t._v("Vault")]),t._v(" "),i("td",{staticStyle:{"text-align":"left"}},[t._v("Optional")]),t._v(" "),i("td",{staticStyle:{"text-align":"left"}},[t._v("This is a word, it is not optional to omit this setting. You will regret it if you don't set it to Optional, note that it is case-sensitive")])])])])]),t._v(" "),i("details",{staticClass:"custom-block details"},[i("summary",[t._v("More in-depth Info")]),t._v(" "),i("ul",[i("li",[i("strong",[t._v("AllowNvramReset")]),t._v(": YES\n"),i("ul",[i("li",[t._v("Allows for NVRAM reset both in the boot picker and when pressing "),i("code",[t._v("Cmd+Opt+P+R")])])])]),t._v(" "),i("li",[i("strong",[t._v("AllowSetDefault")]),t._v(": YES\n"),i("ul",[i("li",[t._v("Allow "),i("code",[t._v("CTRL+Enter")]),t._v(" and "),i("code",[t._v("CTRL+Index")]),t._v(" to set default boot device in the picker")])])]),t._v(" "),i("li",[i("strong",[t._v("ApECID")]),t._v(": 0\n"),i("ul",[i("li",[t._v("Used for netting personalized secure-boot identifiers, currently this quirk is unreliable due to a bug in the macOS installer so we highly encourage you to leave this as default.")])])]),t._v(" "),i("li",[i("strong",[t._v("AuthRestart")]),t._v(": NO\n"),i("ul",[i("li",[t._v("Enables Authenticated restart for FileVault 2 so password is not required on reboot. Can be considered a security risk so optional")])])]),t._v(" "),i("li",[i("strong",[t._v("BlacklistAppleUpdate")]),t._v(": YES\n"),i("ul",[i("li",[t._v("Used for blocking firmware updates, used as extra level of protection as macOS Big Sur no longer uses "),i("code",[t._v("run-efi-updater")]),t._v(" variable")])])]),t._v(" "),i("li",[i("strong",[t._v("BootProtect")]),t._v(": None\n"),i("ul",[i("li",[t._v("Allows the use of Bootstrap.efi inside EFI/OC/Bootstrap instead of BOOTx64.efi, useful for those wanting to either boot with rEFInd or avoid BOOTx64.efi overwrites from Windows. Proper use of this quirks is covered here: "),i("a",{attrs:{href:"https://dortania.github.io/OpenCore-Post-Install/multiboot/bootstrap.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Using Bootstrap.efi"),i("OutboundLink")],1)])])]),t._v(" "),i("li",[i("strong",[t._v("DmgLoading")]),t._v(": Signed\n"),i("ul",[i("li",[t._v("Ensures only signed DMGs load")])])]),t._v(" "),i("li",[i("strong",[t._v("ExposeSensitiveData")]),t._v(": "),i("code",[t._v("6")]),t._v(" "),i("ul",[i("li",[t._v("Shows more debug information, requires debug version of OpenCore")])])]),t._v(" "),i("li",[i("strong",[t._v("Vault")]),t._v(": "),i("code",[t._v("Optional")]),t._v(" "),i("ul",[i("li",[t._v("We won't be dealing vaulting so we can ignore, "),i("strong",[t._v("you won't boot with this set to Secure")])]),t._v(" "),i("li",[t._v("This is a word, it is not optional to omit this setting. You will regret it if you don't set it to "),i("code",[t._v("Optional")]),t._v(", note that it is case-sensitive")])])]),t._v(" "),i("li",[i("strong",[t._v("ScanPolicy")]),t._v(": "),i("code",[t._v("0")]),t._v(" "),i("ul",[i("li",[i("code",[t._v("0")]),t._v(" allows you to see all drives available, please refer to "),i("a",{attrs:{href:"https://dortania.github.io/OpenCore-Post-Install/universal/security.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Security"),i("OutboundLink")],1),t._v(" section for further details. "),i("strong",[t._v("Will not boot USB devices with this set to default")])])])]),t._v(" "),i("li",[i("strong",[t._v("SecureBootModel")]),t._v(": Default\n"),i("ul",[i("li",[t._v("Enables Apple's secure boot functionality in macOS, please refer to "),i("a",{attrs:{href:"https://dortania.github.io/OpenCore-Post-Install/universal/security.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Security"),i("OutboundLink")],1),t._v(" section for further details.")]),t._v(" "),i("li",[t._v("Note: Users may find upgrading OpenCore on an already installed system can result in early boot failures. To resolve this, see here: "),i("RouterLink",{attrs:{to:"/troubleshooting/extended/kernel-issues.html#stuck-on-ocb-loadimage-failed-security-violation"}},[t._v("Stuck on OCB: LoadImage failed - Security Violation")])],1)])])])]),t._v(" "),i("h3",{attrs:{id:"tools"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#tools"}},[t._v("#")]),t._v(" Tools")]),t._v(" "),i("p",[t._v("Used for running OC debugging tools like the shell, ProperTree's snapshot function will add these for you.")]),t._v(" "),i("h3",{attrs:{id:"entries"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#entries"}},[t._v("#")]),t._v(" Entries")]),t._v(" "),i("p",[t._v("Used for specifying irregular boot paths that can't be found naturally with OpenCore.")]),t._v(" "),i("p",[t._v("Won't be covered here, see 8.6 of "),i("a",{attrs:{href:"https://github.com/acidanthera/OpenCorePkg/blob/master/Docs/Configuration.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("Configuration.pdf"),i("OutboundLink")],1),t._v(" for more info")]),t._v(" "),i("h2",{attrs:{id:"nvram"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#nvram"}},[t._v("#")]),t._v(" NVRAM")]),t._v(" "),i("p",[i("img",{attrs:{src:a(313),alt:"NVRAM"}})]),t._v(" "),i("h3",{attrs:{id:"add-4"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#add-4"}},[t._v("#")]),t._v(" Add")]),t._v(" "),i("div",{staticClass:"custom-block tip"},[i("p",{staticClass:"custom-block-title"},[t._v("4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14")]),t._v(" "),i("p",[t._v("Used for OpenCore's UI scaling, default will work for us. See in-depth section for more info")])]),t._v(" "),i("details",{staticClass:"custom-block details"},[i("summary",[t._v("More in-depth Info")]),t._v(" "),i("p",[t._v("Booter Path, mainly used for UI Scaling")]),t._v(" "),i("ul",[i("li",[i("p",[i("strong",[t._v("UIScale")]),t._v(":")]),t._v(" "),i("ul",[i("li",[i("code",[t._v("01")]),t._v(": Standard resolution")]),t._v(" "),i("li",[i("code",[t._v("02")]),t._v(": HiDPI (generally required for FileVault to function correctly on smaller displays)")])])]),t._v(" "),i("li",[i("p",[i("strong",[t._v("DefaultBackgroundColor")]),t._v(": Background color used by boot.efi")]),t._v(" "),i("ul",[i("li",[i("code",[t._v("00000000")]),t._v(": Syrah Black")]),t._v(" "),i("li",[i("code",[t._v("BFBFBF00")]),t._v(": Light Gray")])])])])]),t._v(" "),i("div",{staticClass:"custom-block tip"},[i("p",{staticClass:"custom-block-title"},[t._v("4D1FDA02-38C7-4A6A-9CC6-4BCCA8B30102")]),t._v(" "),i("p",[t._v("OpenCore's NVRAM GUID, mainly relevant for RTCMemoryFixup users")])]),t._v(" "),i("details",{staticClass:"custom-block details"},[i("summary",[t._v("More in-depth Info")]),t._v(" "),i("ul",[i("li",[i("strong",[t._v("rtc-blacklist")]),t._v(": <>\n"),i("ul",[i("li",[t._v("To be used in conjunction with RTCMemoryFixup, see here for more info: "),i("a",{attrs:{href:"https://dortania.github.io/OpenCore-Post-Install/misc/rtc.html#finding-our-bad-rtc-region",target:"_blank",rel:"noopener noreferrer"}},[t._v("Fixing RTC write issues"),i("OutboundLink")],1)]),t._v(" "),i("li",[t._v("Most users can ignore this section")])])])])]),t._v(" "),i("div",{staticClass:"custom-block tip"},[i("p",{staticClass:"custom-block-title"},[t._v("7C436110-AB2A-4BBB-A880-FE41995C9F82")]),t._v(" "),i("p",[t._v("System Integrity Protection bitmask")]),t._v(" "),i("ul",[i("li",[i("strong",[t._v("General Purpose boot-args")]),t._v(":")])]),t._v(" "),i("table",[i("thead",[i("tr",[i("th",{staticStyle:{"text-align":"left"}},[t._v("boot-args")]),t._v(" "),i("th",{staticStyle:{"text-align":"left"}},[t._v("Description")])])]),t._v(" "),i("tbody",[i("tr",[i("td",{staticStyle:{"text-align":"left"}},[i("strong",[t._v("-v")])]),t._v(" "),i("td",{staticStyle:{"text-align":"left"}},[t._v("This enables verbose mode, which shows all the behind-the-scenes text that scrolls by as you're booting instead of the Apple logo and progress bar. It's invaluable to any Hackintosher, as it gives you an inside look at the boot process, and can help you identify issues, problem kexts, etc.")])]),t._v(" "),i("tr",[i("td",{staticStyle:{"text-align":"left"}},[i("strong",[t._v("debug=0x100")])]),t._v(" "),i("td",{staticStyle:{"text-align":"left"}},[t._v("This disables macOS's watchdog which helps prevents a reboot on a kernel panic. That way you can "),i("em",[t._v("hopefully")]),t._v(" glean some useful info and follow the breadcrumbs to get past the issues.")])]),t._v(" "),i("tr",[i("td",{staticStyle:{"text-align":"left"}},[i("strong",[t._v("keepsyms=1")])]),t._v(" "),i("td",{staticStyle:{"text-align":"left"}},[t._v("This is a companion setting to debug=0x100 that tells the OS to also print the symbols on a kernel panic. That can give some more helpful insight as to what's causing the panic itself.")])]),t._v(" "),i("tr",[i("td",{staticStyle:{"text-align":"left"}},[i("strong",[t._v("npci=0x2000")])]),t._v(" "),i("td",{staticStyle:{"text-align":"left"}},[t._v("This disables some PCI debugging related to "),i("code",[t._v("kIOPCIConfiguratorPFM64")]),t._v(", alternative is "),i("code",[t._v("npci= 0x3000")]),t._v(" which disables debugging related to "),i("code",[t._v("gIOPCITunnelledKey")]),t._v(" in addition. Required for when getting stuck on "),i("code",[t._v("PCI Start Configuration")]),t._v(" as there are IRQ conflicts relating to your PCI lanes. "),i("strong",[t._v("Not needed if Above4GDecoding is enabled")]),t._v(". "),i("a",{attrs:{href:"https://opensource.apple.com/source/IOPCIFamily/IOPCIFamily-370.0.2/IOPCIBridge.cpp.auto.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Source"),i("OutboundLink")],1)])])])]),t._v(" "),i("ul",[i("li",[i("strong",[t._v("GPU-Specific boot-args")]),t._v(":")])]),t._v(" "),i("table",[i("thead",[i("tr",[i("th",{staticStyle:{"text-align":"left"}},[t._v("boot-args")]),t._v(" "),i("th",{staticStyle:{"text-align":"left"}},[t._v("Description")])])]),t._v(" "),i("tbody",[i("tr",[i("td",{staticStyle:{"text-align":"left"}},[i("strong",[t._v("agdpmod=pikera")])]),t._v(" "),i("td",{staticStyle:{"text-align":"left"}},[t._v("Used for disabling boardID on Navi GPUs(RX 5000 series), without this you'll get a black screen. "),i("strong",[t._v("Don't use if you don't have Navi")]),t._v("(ie. Polaris and Vega cards shouldn't use this)")])]),t._v(" "),i("tr",[i("td",{staticStyle:{"text-align":"left"}},[i("strong",[t._v("nvda_drv_vrl=1")])]),t._v(" "),i("td",{staticStyle:{"text-align":"left"}},[t._v("Used for enabling Nvidia's Web Drivers on Maxwell and Pascal cards in Sierra and HighSierra")])])])]),t._v(" "),i("ul",[i("li",[i("p",[i("strong",[t._v("csr-active-config")]),t._v(": "),i("code",[t._v("00000000")])]),t._v(" "),i("ul",[i("li",[t._v("Settings for 'System Integrity Protection' (SIP). It is generally recommended to change this with "),i("code",[t._v("csrutil")]),t._v(" via the recovery partition.")]),t._v(" "),i("li",[t._v("csr-active-config by default is set to "),i("code",[t._v("00000000")]),t._v(" which enables System Integrity Protection. You can choose a number of different values but overall we recommend keeping this enabled for best security practices. More info can be found in our troubleshooting page: "),i("RouterLink",{attrs:{to:"/troubleshooting/extended/post-issues.html#disabling-sip"}},[t._v("Disabling SIP")])],1)])]),t._v(" "),i("li",[i("p",[i("strong",[t._v("run-efi-updater")]),t._v(": "),i("code",[t._v("No")])]),t._v(" "),i("ul",[i("li",[t._v("This is used to prevent Apple's firmware update packages from installing and breaking boot order; this is important as these firmware updates (meant for Macs) will not work.")])])]),t._v(" "),i("li",[i("p",[i("strong",[t._v("prev-lang:kbd")]),t._v(": <>")]),t._v(" "),i("ul",[i("li",[t._v("Needed for non-latin keyboards in the format of "),i("code",[t._v("lang-COUNTRY:keyboard")]),t._v(", recommended to keep blank though you can specify it("),i("strong",[t._v("Default in Sample config is Russian")]),t._v("):")]),t._v(" "),i("li",[t._v("American: "),i("code",[t._v("en-US:0")]),t._v("("),i("code",[t._v("656e2d55533a30")]),t._v(" in HEX)")]),t._v(" "),i("li",[t._v("Full list can be found in "),i("a",{attrs:{href:"https://github.com/acidanthera/OpenCorePkg/blob/master/Utilities/AppleKeyboardLayouts/AppleKeyboardLayouts.txt",target:"_blank",rel:"noopener noreferrer"}},[t._v("AppleKeyboardLayouts.txt"),i("OutboundLink")],1)]),t._v(" "),i("li",[t._v("Hint: "),i("code",[t._v("prev-lang:kbd")]),t._v(" can be changed into a String so you can input "),i("code",[t._v("en-US:0")]),t._v(" directly instead of converting to HEX")])])])]),t._v(" "),i("table",[i("thead",[i("tr",[i("th",{staticStyle:{"text-align":"left"}},[t._v("Key")]),t._v(" "),i("th",{staticStyle:{"text-align":"left"}},[t._v("Type")]),t._v(" "),i("th",{staticStyle:{"text-align":"left"}},[t._v("Value")])])]),t._v(" "),i("tbody",[i("tr",[i("td",{staticStyle:{"text-align":"left"}},[t._v("prev-lang:kbd")]),t._v(" "),i("td",{staticStyle:{"text-align":"left"}},[t._v("String")]),t._v(" "),i("td",{staticStyle:{"text-align":"left"}},[t._v("en-US:0")])])])])]),t._v(" "),i("h3",{attrs:{id:"delete-3"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#delete-3"}},[t._v("#")]),t._v(" Delete")]),t._v(" "),i("div",{staticClass:"custom-block tip"},[i("p",{staticClass:"custom-block-title"},[t._v("Info")]),t._v(" "),i("p",[t._v("Forcibly rewrites NVRAM variables, do note that "),i("code",[t._v("Add")]),t._v(" "),i("strong",[t._v("will not overwrite")]),t._v(" values already present in NVRAM so values like "),i("code",[t._v("boot-args")]),t._v(" should be left alone. For us, we'll be changing the following:")]),t._v(" "),i("table",[i("thead",[i("tr",[i("th",{staticStyle:{"text-align":"left"}},[t._v("Quirk")]),t._v(" "),i("th",{staticStyle:{"text-align":"left"}},[t._v("Enabled")])])]),t._v(" "),i("tbody",[i("tr",[i("td",{staticStyle:{"text-align":"left"}},[t._v("WriteFlash")]),t._v(" "),i("td",{staticStyle:{"text-align":"left"}},[t._v("YES")])])])])]),t._v(" "),i("details",{staticClass:"custom-block details"},[i("summary",[t._v("More in-depth Info")]),t._v(" "),i("ul",[i("li",[i("p",[i("strong",[t._v("LegacyEnable")]),t._v(": NO")]),t._v(" "),i("ul",[i("li",[t._v("Allows for NVRAM to be stored on nvram.plist, needed for systems without native NVRAM")])])]),t._v(" "),i("li",[i("p",[i("strong",[t._v("LegacyOverwrite")]),t._v(": NO")]),t._v(" "),i("ul",[i("li",[t._v("Permits overwriting firmware variables from nvram.plist, only needed for systems without native NVRAM")])])]),t._v(" "),i("li",[i("p",[i("strong",[t._v("LegacySchema")])]),t._v(" "),i("ul",[i("li",[t._v("Used for assigning NVRAM variables, used with LegacyEnable set to YES")])])]),t._v(" "),i("li",[i("p",[i("strong",[t._v("WriteFlash")]),t._v(": YES")]),t._v(" "),i("ul",[i("li",[t._v("Enables writing to flash memory for all added variables.")])])])])]),t._v(" "),i("h2",{attrs:{id:"platforminfo"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#platforminfo"}},[t._v("#")]),t._v(" PlatformInfo")]),t._v(" "),i("p",[i("img",{attrs:{src:a(317),alt:"PlatformInfo"}})]),t._v(" "),i("div",{staticClass:"custom-block tip"},[i("p",{staticClass:"custom-block-title"},[t._v("Info")]),t._v(" "),i("p",[t._v("For setting up the SMBIOS info, we'll use CorpNewt's "),i("a",{attrs:{href:"https://github.com/corpnewt/GenSMBIOS",target:"_blank",rel:"noopener noreferrer"}},[t._v("GenSMBIOS"),i("OutboundLink")],1),t._v(" application.")]),t._v(" "),i("p",[t._v("For this example, we'll choose the iMacPro1,1 SMBIOS but some SMBIOS play with certain GPUs better than others:")]),t._v(" "),i("ul",[i("li",[t._v("iMacPro1,1: AMD RX Polaris and Vega")]),t._v(" "),i("li",[t._v("MacPro7,1: AMD RX Polaris, Vega and Navi(Note that MacPro7,1 is also a Catalina exclusive)")]),t._v(" "),i("li",[t._v("MacPro6,1: AMD R5/R7/R9 and older")]),t._v(" "),i("li",[t._v("iMac14,2: Nvidia Kepler and newer")])]),t._v(" "),i("p",[t._v("Run GenSMBIOS, pick option 1 for downloading MacSerial and Option 3 for selecting out SMBIOS.  This will give us an output similar to the following:")]),t._v(" "),i("div",{staticClass:"language-sh extra-class"},[i("pre",{pre:!0,attrs:{class:"language-sh"}},[i("code",[t._v("  "),i("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#######################################################")]),t._v("\n "),i("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#              iMacPro1,1 SMBIOS Info                 #")]),t._v("\n"),i("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#######################################################")]),t._v("\n\nType:         iMacPro1,1\nSerial:       C02YX0TZHX87\nBoard Serial: C029269024NJG36CB\nSmUUID:       DEA17B2D-2F9F-4955-B266-A74C47678AD3\n")])])]),i("p",[t._v("The order is "),i("code",[t._v("Product | Serial | Board Serial (MLB)")])]),t._v(" "),i("p",[t._v("The "),i("code",[t._v("Type")]),t._v(" part gets copied to Generic -> SystemProductName.")]),t._v(" "),i("p",[t._v("The "),i("code",[t._v("Serial")]),t._v(" part gets copied to Generic -> SystemSerialNumber.")]),t._v(" "),i("p",[t._v("The "),i("code",[t._v("Board Serial")]),t._v(" part gets copied to Generic -> MLB.")]),t._v(" "),i("p",[t._v("The "),i("code",[t._v("SmUUID")]),t._v(" part gets copied to Generic -> SystemUUID.")]),t._v(" "),i("p",[t._v("We set Generic -> ROM to either an Apple ROM (dumped from a real Mac), your NIC MAC address, or any random MAC address (could be just 6 random bytes, for this guide we'll use "),i("code",[t._v("11223300 0000")]),t._v(". After install follow the "),i("a",{attrs:{href:"https://dortania.github.io/OpenCore-Post-Install/universal/iservices.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Fixing iServices"),i("OutboundLink")],1),t._v(" page on how to find your real MAC Address)")]),t._v(" "),i("p",[i("strong",[t._v('Reminder that you want either an invalid serial or valid serial numbers but those not in use, you want to get a message back like: "Invalid Serial" or "Purchase Date not Validated"')])]),t._v(" "),i("p",[i("a",{attrs:{href:"https://checkcoverage.apple.com",target:"_blank",rel:"noopener noreferrer"}},[t._v("Apple Check Coverage page"),i("OutboundLink")],1)]),t._v(" "),i("p",[i("strong",[t._v("Automatic")]),t._v(": YES")]),t._v(" "),i("ul",[i("li",[t._v("Generates PlatformInfo based on Generic section instead of DataHub, NVRAM, and SMBIOS sections")])])]),t._v(" "),i("h3",{attrs:{id:"generic"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#generic"}},[t._v("#")]),t._v(" Generic")]),t._v(" "),i("details",{staticClass:"custom-block details"},[i("summary",[t._v("More in-depth Info")]),t._v(" "),i("ul",[i("li",[i("p",[i("strong",[t._v("AdviseWindows")]),t._v(": NO")]),t._v(" "),i("ul",[i("li",[t._v("Used for when the EFI partition isn't first on the Windows drive")])])]),t._v(" "),i("li",[i("p",[i("strong",[t._v("SystemMemoryStatus")]),t._v(": Auto")]),t._v(" "),i("ul",[i("li",[t._v("Sets whether memory is soldered or not in SMBIOS info, purely cosmetic and so we recommend "),i("code",[t._v("Auto")])])])]),t._v(" "),i("li",[i("p",[i("strong",[t._v("ProcessorType")]),t._v(": "),i("code",[t._v("0")])]),t._v(" "),i("ul",[i("li",[t._v("Set to "),i("code",[t._v("0")]),t._v(" for automatic type detection, however this value can be overridden if desired. See "),i("a",{attrs:{href:"https://github.com/acidanthera/OpenCorePkg/blob/master/Include/Apple/IndustryStandard/AppleSmBios.h",target:"_blank",rel:"noopener noreferrer"}},[t._v("AppleSmBios.h"),i("OutboundLink")],1),t._v(" for possible values")])])]),t._v(" "),i("li",[i("p",[i("strong",[t._v("SpoofVendor")]),t._v(": YES")]),t._v(" "),i("ul",[i("li",[t._v("Swaps vendor field for Acidanthera, generally not safe to use Apple as a vendor in most case")])])]),t._v(" "),i("li",[i("p",[i("strong",[t._v("UpdateDataHub")]),t._v(": YES")]),t._v(" "),i("ul",[i("li",[t._v("Update Data Hub fields")])])]),t._v(" "),i("li",[i("p",[i("strong",[t._v("UpdateNVRAM")]),t._v(": YES")]),t._v(" "),i("ul",[i("li",[t._v("Update NVRAM fields")])])]),t._v(" "),i("li",[i("p",[i("strong",[t._v("UpdateSMBIOS")]),t._v(": YES")]),t._v(" "),i("ul",[i("li",[t._v("Updates SMBIOS fields")])])]),t._v(" "),i("li",[i("p",[i("strong",[t._v("UpdateSMBIOSMode")]),t._v(": Create")]),t._v(" "),i("ul",[i("li",[t._v("Replace the tables with newly allocated EfiReservedMemoryType, use "),i("code",[t._v("Custom")]),t._v(" on Dell laptops requiring "),i("code",[t._v("CustomSMBIOSGuid")]),t._v(" quirk")]),t._v(" "),i("li",[t._v("Setting to "),i("code",[t._v("Custom")]),t._v(" with "),i("code",[t._v("CustomSMBIOSGuid")]),t._v(' quirk enabled can also disable SMBIOS injection into "non-Apple" OSes however we do not endorse this method as it breaks Bootcamp compatibility. Use at your own risk')])])])])]),t._v(" "),i("h2",{attrs:{id:"uefi"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#uefi"}},[t._v("#")]),t._v(" UEFI")]),t._v(" "),i("p",[i("img",{attrs:{src:a(318),alt:"UEFI"}})]),t._v(" "),i("p",[i("strong",[t._v("ConnectDrivers")]),t._v(": YES")]),t._v(" "),i("ul",[i("li",[t._v("Forces .efi drivers, change to NO will automatically connect added UEFI drivers. This can make booting slightly faster, but not all drivers connect themselves. E.g. certain file system drivers may not load.")])]),t._v(" "),i("h3",{attrs:{id:"drivers"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#drivers"}},[t._v("#")]),t._v(" Drivers")]),t._v(" "),i("p",[t._v("Add your .efi drivers here.")]),t._v(" "),i("p",[t._v("Only drivers present here should be:")]),t._v(" "),i("ul",[i("li",[t._v("HfsPlus.efi")]),t._v(" "),i("li",[t._v("OpenRuntime.efi")])]),t._v(" "),i("h3",{attrs:{id:"apfs"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#apfs"}},[t._v("#")]),t._v(" APFS")]),t._v(" "),i("p",[t._v("Settings related to the APFS driver, leave everything here as default.")]),t._v(" "),i("h3",{attrs:{id:"audio"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#audio"}},[t._v("#")]),t._v(" Audio")]),t._v(" "),i("p",[t._v("Related to AudioDxe settings, for us we'll be ignoring(leave as default). This is unrelated to audio support in macOS.")]),t._v(" "),i("ul",[i("li",[t._v("For further use of AudioDxe and the Audio section, please see the Post Install page: "),i("a",{attrs:{href:"https://dortania.github.io/OpenCore-Post-Install/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Add GUI and Boot-chime"),i("OutboundLink")],1)])]),t._v(" "),i("h3",{attrs:{id:"input"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#input"}},[t._v("#")]),t._v(" Input")]),t._v(" "),i("p",[t._v("Related to boot.efi keyboard passthrough used for FileVault and Hotkey support, leave everything here as default as we have no use for these quirks. See here for more details: "),i("a",{attrs:{href:"https://dortania.github.io/OpenCore-Post-Install/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Security and FileVault"),i("OutboundLink")],1)]),t._v(" "),i("h3",{attrs:{id:"output"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#output"}},[t._v("#")]),t._v(" Output")]),t._v(" "),i("p",[t._v("Relating to OpenCore's visual output,  leave everything here as default as we have no use for these quirks.")]),t._v(" "),i("h3",{attrs:{id:"protocoloverrides"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#protocoloverrides"}},[t._v("#")]),t._v(" ProtocolOverrides")]),t._v(" "),i("p",[t._v("Mainly relevant for Virtual machines, legacy macs and FileVault users. See here for more details: "),i("a",{attrs:{href:"https://dortania.github.io/OpenCore-Post-Install/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Security and FileVault"),i("OutboundLink")],1)]),t._v(" "),i("h3",{attrs:{id:"quirks-4"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#quirks-4"}},[t._v("#")]),t._v(" Quirks")]),t._v(" "),i("div",{staticClass:"custom-block tip"},[i("p",{staticClass:"custom-block-title"},[t._v("Info")]),t._v(" "),i("p",[t._v("Relating to quirks with the UEFI environment, for us we'll be changing the following:")]),t._v(" "),i("table",[i("thead",[i("tr",[i("th",{staticStyle:{"text-align":"left"}},[t._v("Quirk")]),t._v(" "),i("th",{staticStyle:{"text-align":"left"}},[t._v("Enabled")]),t._v(" "),i("th",{staticStyle:{"text-align":"left"}},[t._v("Comment")])])]),t._v(" "),i("tbody",[i("tr",[i("td",{staticStyle:{"text-align":"left"}},[t._v("UnblockFsConnect")]),t._v(" "),i("td",{staticStyle:{"text-align":"left"}},[t._v("NO")]),t._v(" "),i("td",{staticStyle:{"text-align":"left"}},[t._v("Needed mainly by HP motherboards")])])])])]),t._v(" "),i("details",{staticClass:"custom-block details"},[i("summary",[t._v("More in-depth Info")]),t._v(" "),i("ul",[i("li",[i("p",[i("strong",[t._v("DeduplicateBootOrder")]),t._v(": YES")]),t._v(" "),i("ul",[i("li",[t._v("Request fallback of some Boot prefixed variables from "),i("code",[t._v("OC_VENDOR_VARIABLE_GUID")]),t._v(" to "),i("code",[t._v("EFI_GLOBAL_VARIABLE_GUID")]),t._v(". Used for fixing boot options.")])])]),t._v(" "),i("li",[i("p",[i("strong",[t._v("RequestBootVarRouting")]),t._v(": YES")]),t._v(" "),i("ul",[i("li",[t._v("Redirects AptioMemoryFix from "),i("code",[t._v("EFI_GLOBAL_VARIABLE_GUID")]),t._v(" to "),i("code",[t._v("OC_VENDOR_VARIABLE_GUID")]),t._v(". Needed for when firmware tries to delete boot entries and is recommended to be enabled on all systems for correct update installation, Startup Disk control panel functioning, etc.")])])]),t._v(" "),i("li",[i("p",[i("strong",[t._v("UnblockFsConnect")]),t._v(": NO")]),t._v(" "),i("ul",[i("li",[t._v("Some firmware block partition handles by opening them in By Driver mode, which results in File System protocols being unable to install. Mainly relevant for HP systems when no drives are listed")])])])])]),t._v(" "),i("h3",{attrs:{id:"reservedmemory"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#reservedmemory"}},[t._v("#")]),t._v(" ReservedMemory")]),t._v(" "),i("p",[t._v("Used for exempting certain memory regions from OSes to use, mainly relevant for Sandy Bridge iGPUs or systems with faulty memory. Use of this quirk is not covered in this guide")]),t._v(" "),i("h2",{attrs:{id:"cleaning-up"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#cleaning-up"}},[t._v("#")]),t._v(" Cleaning up")]),t._v(" "),i("p",[t._v("And now you're ready to save and place it into your EFI under EFI/OC.")]),t._v(" "),i("p",[t._v("For those having booting issues, please make sure to read the "),i("RouterLink",{attrs:{to:"/troubleshooting/troubleshooting.html"}},[t._v("Troubleshooting section")]),t._v(" first and if your questions are still unanswered we have plenty of resources at your disposal:")],1),t._v(" "),i("ul",[i("li",[i("a",{attrs:{href:"https://discord.gg/QuUWg7",target:"_blank",rel:"noopener noreferrer"}},[t._v("AMD OS X Discord"),i("OutboundLink")],1)]),t._v(" "),i("li",[i("a",{attrs:{href:"https://www.reddit.com/r/hackintosh/",target:"_blank",rel:"noopener noreferrer"}},[t._v("r/Hackintosh Subreddit"),i("OutboundLink")],1)])]),t._v(" "),i("p",[i("strong",[t._v("Sanity check")]),t._v(":")]),t._v(" "),i("p",[t._v("So thanks to the efforts of Ramus, we also have an amazing tool to help verify your config for those who may have missed something:")]),t._v(" "),i("ul",[i("li",[i("a",{attrs:{href:"https://opencore.slowgeek.com",target:"_blank",rel:"noopener noreferrer"}},[i("strong",[t._v("Sanity Checker")]),i("OutboundLink")],1)])]),t._v(" "),i("p",[t._v("Note that this tool is neither made nor maintained by Dortania, any and all issues with this site should be sent here: "),i("a",{attrs:{href:"https://github.com/rlerdorf/OCSanity",target:"_blank",rel:"noopener noreferrer"}},[t._v("Sanity Checker Repo"),i("OutboundLink")],1)]),t._v(" "),i("h2",{attrs:{id:"amd-bios-settings"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#amd-bios-settings"}},[t._v("#")]),t._v(" AMD BIOS Settings")]),t._v(" "),i("ul",[i("li",[t._v("Note: Most of these options may not be present in your firmware, we recommend matching up as closely as possible but don't be too concerned if many of these options are not available in your BIOS")])]),t._v(" "),i("h3",{attrs:{id:"disable"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#disable"}},[t._v("#")]),t._v(" Disable")]),t._v(" "),i("ul",[i("li",[t._v("Fast Boot")]),t._v(" "),i("li",[t._v("Secure Boot")]),t._v(" "),i("li",[t._v("Serial/COM Port")]),t._v(" "),i("li",[t._v("Parallel Port")]),t._v(" "),i("li",[t._v("Compatibility Support Module (CSM)("),i("strong",[t._v("Must be off, GPU errors like "),i("code",[t._v("gIO")]),t._v(" are common when this option in enabled")]),t._v(")")])]),t._v(" "),i("h3",{attrs:{id:"enable"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#enable"}},[t._v("#")]),t._v(" Enable")]),t._v(" "),i("ul",[i("li",[t._v("Above 4G decoding("),i("strong",[t._v("This must be on, if you can't find the option then add "),i("code",[t._v("npci=0x2000")]),t._v(" to boot-args. Do not have both this option and npci enabled at the same time")]),t._v(")")]),t._v(" "),i("li",[t._v("EHCI/XHCI Hand-off")]),t._v(" "),i("li",[t._v("OS type: Windows 8.1/10 UEFI Mode")]),t._v(" "),i("li",[t._v("SATA Mode: AHCI")])]),t._v(" "),i("h1",{attrs:{id:"now-with-all-this-done-head-to-the-installation-page"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#now-with-all-this-done-head-to-the-installation-page"}},[t._v("#")]),t._v(" Now with all this done, head to the "),i("RouterLink",{attrs:{to:"/installation/installation-process.html"}},[t._v("Installation Page")])],1)])}),[],!1,null,null,null);e.default=o.exports}}]);